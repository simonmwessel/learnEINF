{
    "categories": [
        {
            "title": "technische Grundlagen der Informatik",
            "questions": [
                {
                    "question": "Nennen Sie die grundlegenden Bausteine eines Computers und erläutern Sie deren Funktion.",
                    "answer": "Ein moderner Computer besteht aus fundamentalen Bausteinen wie Transistoren, die als Schaltelemente dienen, sowie weiteren Komponenten, die auf der Anwendung der booleschen Logik beruhen. Transistoren ermöglichen das Schalten zwischen den Zuständen 0 und 1 und bilden somit die Basis für digitale Schaltungen."
                },
                {
                    "question": "Erklären Sie, wie binäre Werte in einem elektronischen Rechner dargestellt werden.",
                    "answer": "In elektronischen Rechnern werden binäre Werte durch unterschiedliche elektrische Spannungen repräsentiert. Ein definierter Spannungspegel steht für die Ziffer 1, ein anderer für 0. Diese binäre Darstellung erlaubt die Umsetzung logischer Operationen mithilfe von Schaltungen, die auf der booleschen Logik basieren."
                },
                {
                    "question": "Beschreiben Sie das Prinzip der binären Addition und führen Sie ein Rechenbeispiel durch.",
                    "answer": "Bei der binären Addition werden zwei Zahlen bitweise addiert. Dabei gilt: 0+0=0, 0+1=1, 1+0=1 und 1+1=10 (wobei 0 geschrieben und 1 als Übertrag in die nächste Stelle übernommen wird). Beispiel: Addieren Sie 1011 und 1101. Beginnend von rechts ergibt sich: 1+1=10 (0, Übertrag 1), 1+0+1=10 (0, Übertrag 1), 0+1+1=10 (0, Übertrag 1) und 1+1+1=11 (1, Übertrag 1). Der letzte Übertrag wird hinzugefügt, sodass das Ergebnis 11000 (binär) lautet."
                },
                {
                    "question": "Konvertieren Sie die Dezimalzahl 307 in das Binär- und Hexadezimalsystem und erklären Sie den Umrechnungsprozess.",
                    "answer": "Zur Umrechnung von 307 in das Binärsystem teilt man die Zahl wiederholt durch 2 und notiert die Reste. Das Ergebnis lautet 100110011 (binär). Für die Hexadezimaldarstellung wird die Binärzahl in 4-Bit-Gruppen unterteilt – falls nötig mit führenden Nullen ergänzt – und diese Gruppen werden dann in die entsprechenden hexadezimalen Ziffern umgerechnet. So erhält man für 307 beispielsweise den Hexadezimalwert 133. Der zugrunde liegende Prozess zeigt, dass sich der Zahlenwert nicht ändert, sondern nur die Darstellung variiert."
                },
                {
                    "question": "Was ist das Zweierkomplement und wie wird es zur Darstellung negativer Zahlen verwendet? Geben Sie ein Beispiel.",
                    "answer": "Das Zweierkomplement ist ein Verfahren, um negative Zahlen im Binärsystem darzustellen. Dabei wird zunächst der positive Wert in Binärform geschrieben, anschließend werden alle Bits invertiert und zum Ergebnis wird 1 addiert. Beispiel: Die Zahl 9 wird als 00001001 dargestellt. Invertiert ergibt dies 11110110, und durch Addition von 1 erhält man 11110111, was -9 repräsentiert."
                },
                {
                    "question": "Vergleichen Sie die Festkomma- und die Fließkommadarstellung. Nennen Sie einen wesentlichen Nachteil der Festkommadarstellung.",
                    "answer": "Bei der Festkommadarstellung wird ein fester Anteil der Bits für den ganzzahligen und der restliche Anteil für den Nachkommabereich genutzt. Ein wesentlicher Nachteil ist, dass diese Darstellung nur einen begrenzten Zahlenbereich abdecken kann und bei sehr großen oder sehr kleinen Zahlen zu Überlauf- bzw. Unterlauffehlern führen kann. Die Fließkommadarstellung passt sich hingegen dynamisch an, wodurch ein wesentlich größerer Zahlenbereich darstellbar ist."
                },
                {
                    "question": "Erklären Sie die Vorteile der hexadezimalen Darstellung gegenüber der reinen binären Darstellung.",
                    "answer": "Die Hexadezimaldarstellung fasst jeweils 4 Binärbits zu einer einzigen Ziffer zusammen, was die Darstellung wesentlich kompakter und übersichtlicher macht. Dies erleichtert das Lesen, Verstehen und Debuggen von langen Bitfolgen, ohne dass der zugrunde liegende Zahlenwert verändert wird."
                },
                {
                    "question": "Beschreiben Sie, wie Zeichen in einem Computer codiert werden, und erläutern Sie den Unterschied zwischen ASCII und UTF-8.",
                    "answer": "Zeichen werden in Computern in numerischen Codes dargestellt. Ursprünglich wurde ASCII verwendet, ein 7-Bit-Code, der 128 Zeichen abdeckt. UTF-8 erweitert dieses Prinzip, indem es eine variable Anzahl von Bytes nutzt, um eine sehr große Anzahl internationaler Zeichen darzustellen. Während die ersten 128 Zeichen in UTF-8 identisch mit ASCII sind, ermöglicht UTF-8 durch zusätzliche Bytes die Codierung vieler weiterer Zeichen, was insbesondere für die globale Textverarbeitung wichtig ist."
                },
                {
                    "question": "Definieren Sie den Begriff 'Algorithmus' und erklären Sie, warum er deterministisch sein muss.",
                    "answer": "Ein Algorithmus ist eine endliche, wohldefinierte Abfolge von Schritten, die zur Lösung eines bestimmten Problems führt. Er muss deterministisch sein, damit bei gleichen Eingaben stets das gleiche Ergebnis erzielt wird, was die Vorhersagbarkeit und Korrektheit des Verfahrens sicherstellt."
                },
                {
                    "question": "Erläutern Sie anhand eines Beispiels, wie die Umrechnung von Zahlen zwischen verschiedenen Zahlensystemen funktioniert.",
                    "answer": "Um eine Zahl von Dezimal in Binär umzuwandeln, teilt man die Zahl wiederholt durch 2 und notiert die Reste, welche in umgekehrter Reihenfolge die Binärdarstellung ergeben. Wird beispielsweise die Dezimalzahl 307 umgerechnet, ergeben die wiederholten Divisionen die Binärzahl 100110011. Das gleiche Prinzip lässt sich auf andere Zahlensysteme übertragen, wobei für die Hexadezimaldarstellung jeweils 4-Bit-Gruppen gebildet und in die entsprechenden Ziffern (0–9, A–F) umgerechnet werden."
                },
                {
                    "question": "Diskutieren Sie die Bedeutung der booleschen Logik für die digitale Schaltungstechnik.",
                    "answer": "Die boolesche Logik bildet das Fundament der digitalen Schaltungstechnik, da sie mit einfachen logischen Operationen wie UND, ODER und NICHT die Verarbeitung von binären Signalen ermöglicht. Diese Operationen erlauben es, komplexe Schaltungen aus einfachen, binären Bausteinen zu realisieren, was unerlässlich für die Funktionsweise von Computern ist."
                },
                {
                    "question": "Nennen Sie drei wesentliche Eigenschaften von Transistoren und erläutern Sie, warum sie als grundlegende Bausteine moderner Prozessoren gelten.",
                    "answer": "Transistoren zeichnen sich durch ihre Fähigkeit zur Verstärkung von Signalen, zum schnellen Schalten und zur Integration in sehr kleine Bauelemente aus. Diese Eigenschaften ermöglichen es, Milliarden von Transistoren auf einem Chip zu integrieren, was die enorme Rechenleistung moderner Prozessoren und die Miniaturisierung von Computern ermöglicht."
                }
            ]
        },
        {
            "title": "Geschichte der Informatik",
            "questions": [
                {
                    "question": "Welche frühen Rechenhilfsmittel legten den Grundstein für die Informatik und welche Prinzipien wurden dabei angewendet?",
                    "answer": "Frühe Rechenhilfsmittel wie der Abakus demonstrierten, dass durch systematische Speicherung und Verarbeitung von Zahlen komplexe Berechnungen möglich sind. Diese Geräte basierten auf einfachen arithmetischen Prinzipien und bildeten die konzeptuelle Grundlage für spätere, maschinelle Rechenprozesse."
                },
                {
                    "question": "Erklären Sie, warum der Universalcomputer als Meilenstein in der Entwicklung der Informatik gilt.",
                    "answer": "Der Universalcomputer, der programmierbar ist und beliebige Berechnungen durchführen kann, markierte einen entscheidenden Durchbruch. Er trennte Hardware von Software, ermöglichte flexible Programmierung und legte den Grundstein für allgemeine, vielseitig einsetzbare Rechenmaschinen."
                },
                {
                    "question": "Diskutieren Sie den Einfluss des Zweiten Weltkriegs auf die technologische Entwicklung der Informatik.",
                    "answer": "Der Zweite Weltkrieg beschleunigte die Entwicklung der Informatik erheblich, da militärische Anforderungen zu bedeutenden Innovationen führten. Projekte wie der ENIAC in den USA und die Zuse Z3 in Deutschland demonstrierten, dass elektronische und programmierbare Rechner auch für komplexe Berechnungen in der Kriegsführung genutzt werden können – ein Meilenstein, der später auch den zivilen Sektor prägte."
                },
                {
                    "question": "Vergleichen Sie die frühen Computer wie die Zuse Z1, Zuse Z3 und den ENIAC hinsichtlich ihrer Technik und Programmierbarkeit.",
                    "answer": "Die Zuse Z1 war ein mechanisch konstruierter Rechner, während die Zuse Z3 elektrische Relais nutzte, was sie programmierbarer machte. Im Gegensatz dazu war der ENIAC ein rein elektronischer Rechner, der im Dezimalsystem arbeitete und aufgrund seiner Größe und Verkabelung die Grundlagen für spätere elektronische Computer schuf."
                },
                {
                    "question": "Welche Bedeutung hatte der Übergang von experimentellen Rechenmaschinen zur kommerziellen Nutzung für die Entwicklung der Informatik?",
                    "answer": "Der Übergang von experimentellen Prototypen zu kommerziell nutzbaren Computern ermöglichte eine breite Anwendung der Technologie in Wirtschaft, Verwaltung und Wissenschaft. Diese Entwicklung führte zu Standardisierungen, verbessertem Design und letztlich zur massenhaften Verbreitung von Computersystemen in der Gesellschaft."
                },
                {
                    "question": "Welche Rolle spielten Pioniere wie Konrad Zuse in der Geschichte der Informatik?",
                    "answer": "Pioniere wie Konrad Zuse leisteten wegweisende Beiträge, indem sie den ersten programmierbaren Rechner entwickelten. Ihre Arbeiten schufen die technischen Grundlagen für moderne Computerarchitekturen und beeinflussten maßgeblich die weitere Forschung und Entwicklung in der Informatik."
                },
                {
                    "question": "Welche technischen Entwicklungen trugen zur Verbreitung von Computern in den 1970er und 1980er Jahren bei?",
                    "answer": "In den 1970er und 1980er Jahren führten die Einführung von Mikroprozessoren, die Entwicklung kostengünstiger Heimcomputer sowie Fortschritte in Betriebssystemen und Speichertechnologien zu einer massenhaften Verbreitung von Computern. Diese Entwicklungen machten den Zugang zu Rechenleistung breiter verfügbar und förderten die rasche Ausbreitung der Informatik in allen Lebensbereichen."
                }
            ]
        },
        {
            "title": "von-Neumann-Architektur",
            "questions": [
                {
                    "question": "Nennen Sie die wesentlichen Komponenten der von-Neumann-Architektur und erläutern Sie deren jeweilige Funktion.",
                    "answer": "Die von-Neumann-Architektur umfasst in der Regel folgende Komponenten:\n- **Arithmetic Logic Unit (ALU):** Führt arithmetische und logische Operationen durch.\n- **Control Unit (Steuerwerk):** Liest Befehle aus dem Speicher, dekodiert sie und steuert den Ablauf der Ausführung.\n- **Memory (Speicher):** Speichert sowohl Daten als auch Befehle, gemäß dem Prinzip des gespeicherten Programms.\n- **Bus:** Dient als Kommunikationsschnittstelle zwischen den Komponenten (Daten-, Adress- und Steuerbus).\n- **I/O Unit:** Steuert Ein- und Ausgaben von Daten an externe Geräte."
                },
                {
                    "question": "Erklären Sie das Prinzip des gespeicherten Programms in der von-Neumann-Architektur.",
                    "answer": "Das Prinzip des gespeicherten Programms besagt, dass sowohl Daten als auch Befehle im selben Speicher abgelegt werden. Dies ermöglicht es, dass Programme dynamisch verändert und zur Laufzeit interpretiert werden. Die Control Unit liest die Befehle sequentiell anhand des Program Counters, was eine flexible und effiziente Ausführung ermöglicht."
                },
                {
                    "question": "Beschreiben Sie den von-Neumann-Zyklus und erläutern Sie die einzelnen Schritte dieses Prozesses.",
                    "answer": "Der von-Neumann-Zyklus besteht aus vier wesentlichen Schritten:\n1. **Fetch:** Der nächste Befehl wird aus dem Speicher abgerufen.\n2. **Decode:** Die Control Unit dekodiert den Befehl, um die auszuführende Operation zu bestimmen.\n3. **Execute:** Die ALU führt die angegebene Operation aus.\n4. **Write Back:** Das Ergebnis wird in den Speicher zurückgeschrieben.\nDieser Zyklus wiederholt sich, bis das Programm endet."
                },
                {
                    "question": "Welche Rolle spielt der Befehlszähler (Program Counter) in der Steuerung des Programmablaufs?",
                    "answer": "Der Befehlszähler speichert die Adresse des nächsten auszuführenden Befehls. Er wird nach jeder Befehlsausführung automatisch inkrementiert, kann aber durch Sprung- oder Verzweigungsbefehle auch verändert werden, um nicht-sequentielle Abläufe zu ermöglichen."
                },
                {
                    "question": "Wie interagiert die Control Unit mit der ALU in der von-Neumann-Architektur?",
                    "answer": "Die Control Unit liest Befehle aus dem Speicher, dekodiert sie und sendet Steuerbefehle an die ALU. Dadurch wird die ALU veranlasst, die entsprechenden arithmetischen oder logischen Operationen auszuführen. Diese Zusammenarbeit sichert den korrekten Ablauf des Programms."
                },
                {
                    "question": "Welche Bedeutung hat der gemeinsame Bus in der von-Neumann-Architektur?",
                    "answer": "Der Bus dient als zentrales Kommunikationsmedium, über das alle Komponenten – ALU, Control Unit, Speicher und I/O-Einheiten – miteinander verbunden sind. Er ermöglicht den Datentransfer sowie den Austausch von Adressen und Steuerinformationen, was für die synchrone Ausführung des Programms unerlässlich ist."
                },
                {
                    "question": "Wie wird in der von-Neumann-Architektur zwischen Befehlen und Daten im gleichen Speicher unterschieden?",
                    "answer": "Die Unterscheidung erfolgt durch den Kontext der Adressierung. Der Befehlszähler gibt an, welche Speicherzellen als Befehle interpretiert werden, während andere Zellen für Daten genutzt werden. Trotz der gemeinsamen Speicherung müssen durch die Steuerung klare Grenzen gezogen werden, um unbeabsichtigte Überschneidungen zu vermeiden."
                },
                {
                    "question": "Nennen Sie einen Vorteil und einen Nachteil des gespeicherten Programmkonzepts.",
                    "answer": "Ein Vorteil des gespeicherten Programmkonzepts ist die hohe Flexibilität, da Programme zur Laufzeit verändert werden können und nicht fest in der Hardware verankert sind. Ein Nachteil besteht jedoch im sogenannten 'Von-Neumann-Bottleneck', bei dem die gemeinsame Nutzung des Speichers für Daten und Befehle zu Engpässen im Datendurchsatz führen kann."
                },
                {
                    "question": "Wie ermöglicht die von-Neumann-Architektur die Umsetzung komplexer Programme, obwohl sie relativ einfache Hardwarekomponenten verwendet?",
                    "answer": "Durch die Trennung von Software und Hardware und das Prinzip des gespeicherten Programms können komplexe Programme in einem gemeinsamen Speicher abgelegt und flexibel abgearbeitet werden. Die Control Unit koordiniert dabei die einfachen Hardwarekomponenten, um durch Kombination vielschichtiger Befehle komplexe Aufgaben zu lösen."
                },
                {
                    "question": "Diskutieren Sie, welche Herausforderungen sich aus der gemeinsamen Nutzung des Speichers für Daten und Befehle ergeben können.",
                    "answer": "Die gemeinsame Nutzung des Speichers führt zum 'Von-Neumann-Bottleneck', da sowohl Daten als auch Befehle über denselben Bus übertragen werden müssen. Dies kann zu Engpässen und einer reduzierten Gesamtleistung führen, insbesondere wenn parallele Datenströme verarbeitet werden sollen. Zudem muss die Steuerung sehr präzise arbeiten, um ungewollte Überschneidungen und Fehler zu vermeiden."
                }
            ]
        },
        {
            "title": "Assemblerprogrammierung",
            "questions": [
                {
                    "question": "Was versteht man unter Assemblierung in der Assemblerprogrammierung?",
                    "answer": "Assemblierung bezeichnet den Prozess, bei dem Assemblercode in Maschinencode übersetzt wird. Jeder Assemblerbefehl wird dabei in die entsprechende Bitfolge umgewandelt, sodass er direkt von der Hardware ausgeführt werden kann."
                },
                {
                    "question": "Nennen Sie typische Assemblerbefehle und erläutern Sie deren Funktionen.",
                    "answer": "Typische Assemblerbefehle sind beispielsweise:\n- **MOV:** Überträgt Daten zwischen Registern oder zwischen einem Register und dem Speicher.\n- **ADD:** Führt eine Addition durch.\n- **CMP:** Vergleicht zwei Werte.\n- **JLE:** Führt einen bedingten Sprung aus, wenn der erste Wert kleiner oder gleich dem zweiten ist.\nDiese Befehle steuern den Programmfluss und die Datenmanipulation in einem Assemblerprogramm."
                },
                {
                    "question": "Wie verarbeitet der Assembler Labels und welche Bedeutung haben diese im Programmablauf?",
                    "answer": "Labels sind Markierungen im Assemblercode, die als Bezugspunkte für Sprungbefehle dienen. Der Assembler weist diesen Labels konkrete Speicheradressen zu, sodass Befehle wie JMP oder JLE den Programmfluss an die Adresse des entsprechenden Labels ändern können."
                },
                {
                    "question": "Erklären Sie den Unterschied zwischen Assemblierung, Interpretation und Compilation im Kontext der Codeübersetzung.",
                    "answer": "Bei der Assemblierung wird Assemblercode direkt in Maschinencode übersetzt (1:1-Übersetzung). Im Gegensatz dazu übersetzt ein Interpreter den Quellcode zeilenweise zur Laufzeit und führt ihn unmittelbar aus, während ein Compiler den gesamten Quellcode vor der Ausführung in ein ausführbares Programm umwandelt."
                },
                {
                    "question": "Wie wird ein einfacher Schleifenmechanismus in Assembler realisiert? Erläutern Sie anhand eines Beispiels.",
                    "answer": "Ein Schleifenmechanismus in Assembler wird typischerweise durch das Initialisieren eines Zählers, das Addieren eines Werts, das Vergleichen des Zählers mit einem Grenzwert und einen bedingten Sprung implementiert. Beispiel: Ein Register wird auf einen Startwert gesetzt, dann wird in einer Schleife ein weiterer Wert addiert. Mit einem CMP-Befehl wird der Zähler mit einem Grenzwert verglichen und ein konditionaler Sprung (z.B. JLE) zurück an den Schleifenanfang erfolgt, bis der Grenzwert erreicht ist."
                },
                {
                    "question": "Welche Vor- und Nachteile hat die Assemblerprogrammierung im Vergleich zu höheren Programmiersprachen?",
                    "answer": "Vorteile der Assemblerprogrammierung sind die hohe Kontrolle über die Hardware, eine effiziente Nutzung der Systemressourcen und meist eine sehr schnelle Ausführung. Nachteile sind die hohe Komplexität, eine steile Lernkurve sowie eine geringere Lesbarkeit und Wartbarkeit des Codes im Vergleich zu höheren Programmiersprachen."
                },
                {
                    "question": "Was ist der Unterschied zwischen unbedingten und konditionalen Sprungbefehlen im Assembler?",
                    "answer": "Ein unbedingter Sprungbefehl (wie JMP) leitet den Programmfluss immer an eine bestimmte Adresse, unabhängig von Bedingungen. Ein konditionaler Sprungbefehl (wie JLE, JE oder JNE) führt einen Sprung nur dann aus, wenn eine vorher festgelegte Bedingung erfüllt ist, was den Ablauf dynamisch steuert."
                },
                {
                    "question": "Wie wird der Stack in Assemblerprogrammen genutzt, insbesondere zur Realisierung von Unterprogrammen?",
                    "answer": "Der Stack wird verwendet, um Rücksprungadressen, Parameter und lokale Variablen zu speichern. Mit Befehlen wie PUSH und POP werden Daten auf den Stack gelegt bzw. von dort entnommen, was die Realisierung von Unterprogrammen und rekursiven Aufrufen unterstützt."
                },
                {
                    "question": "Warum ist die Assemblerprogrammierung wichtig für das Verständnis der Computerarchitektur?",
                    "answer": "Assemblerprogrammierung ermöglicht einen direkten Einblick in die Funktionsweise der Hardware. Sie zeigt, wie Befehle auf Maschinencodeebene ausgeführt werden, wie Register und Speicher genutzt werden und wie der Programmfluss gesteuert wird. Dieses tiefe Verständnis der zugrundeliegenden Prozesse ist essentiell, um die Arbeitsweise moderner Computer zu begreifen."
                }
            ]
        },
        {
            "title": "höhere Programmiersprachen",
            "questions": [
                {
                    "question": "Nennen Sie drei wesentliche Merkmale imperativer Programmiersprachen.",
                    "answer": "Imperative Programmiersprachen zeichnen sich durch eine explizite Steuerung des Programmflusses, den direkten Umgang mit Variablen und Operationen sowie eine geringe Abstraktionsebene aus, was den engen Bezug zur Hardware ermöglicht."
                },
                {
                    "question": "Vergleichen Sie imperative und objektorientierte Programmiersprachen hinsichtlich ihrer Hauptmerkmale und Einsatzgebiete.",
                    "answer": "Imperative Sprachen beschreiben Schritt-für-Schritt, wie ein Problem gelöst wird, was sie oft weniger modular und schwer wartbar macht. Objektorientierte Sprachen hingegen modellieren Probleme in Form von Objekten, die Daten und Verhalten kapseln, was zu einer besseren Modularität, Wiederverwendbarkeit und einer realitätsnäheren Abbildung komplexer Systeme führt."
                },
                {
                    "question": "Was bedeutet es, dass Funktionen in der funktionalen Programmierung 'First-Class-Citizens' sind?",
                    "answer": "Das Konzept der First-Class-Citizens bedeutet, dass Funktionen wie normale Daten behandelt werden können. Sie können als Argumente übergeben, als Rückgabewerte genutzt oder in Variablen gespeichert werden. Dadurch entstehen flexible und expressive Programmiermuster, wie Higher-Order Functions."
                },
                {
                    "question": "Erklären Sie, wie Rekursion in rein funktionalen Programmiersprachen als Ersatz für Iteration eingesetzt wird.",
                    "answer": "In rein funktionalen Sprachen werden Schleifen häufig durch Rekursion realisiert, da es keine veränderlichen Zustände gibt. Eine Funktion ruft sich selbst auf, bis eine Abbruchbedingung erfüllt ist, wodurch ein iterativer Prozess ohne explizite Schleifen erreicht wird."
                },
                {
                    "question": "Nennen Sie einen Vorteil und einen Nachteil deklarativer Programmiersprachen.",
                    "answer": "Ein Vorteil deklarativer Sprachen ist die klare Beschreibung des gewünschten Ergebnisses, ohne sich um den exakten Berechnungsweg kümmern zu müssen, was zu kürzerem und oft leichter lesbarem Code führt. Ein Nachteil kann jedoch die geringere Kontrolle über den Ausführungsprozess sein, was das Debugging erschweren kann."
                },
                {
                    "question": "Geben Sie ein Beispiel in Pseudocode für eine for-Schleife in einer imperativen Programmiersprache.",
                    "answer": "Ein Beispiel in Pseudocode:\n```\nfor i from 1 to 10 do\n    print(i)\nend for\n```\nDieser Code gibt die Zahlen von 1 bis 10 aus."
                },
                {
                    "question": "Welche typischen Nachteile können bei imperativen Programmiersprachen auftreten?",
                    "answer": "Imperative Sprachen können zu unübersichtlichem, schwer wartbarem Code führen, da der genaue Ablauf der Programmierung explizit festgelegt wird. Zudem ist der enge Hardwarebezug oft weniger portabel, was den Entwicklungsaufwand bei komplexen Systemen erhöhen kann."
                },
                {
                    "question": "Wie haben moderne objektorientierte Programmiersprachen funktionale Konzepte integriert?",
                    "answer": "Moderne objektorientierte Sprachen wie Java oder Kotlin unterstützen mittlerweile funktionale Elemente wie Lambda-Ausdrücke, First-Class-Funktionen und unveränderliche Datenstrukturen. Diese Konzepte ermöglichen es, kompakteren, sichereren und weniger fehleranfälligen Code zu schreiben, ohne komplett auf die objektorientierte Struktur zu verzichten."
                },
                {
                    "question": "Warum könnte ein Entwickler einen deklarativen Programmieransatz gegenüber einem imperativen bevorzugen?",
                    "answer": "Ein deklarativer Ansatz ermöglicht es, sich auf das 'Was' (das gewünschte Ergebnis) zu konzentrieren, statt auf das 'Wie' (den exakten Ablauf). Dies führt oft zu einer einfacheren und klareren Codebasis, was besonders bei Aufgaben wie Datenbankabfragen oder der Beschreibung von Benutzeroberflächen von Vorteil sein kann."
                },
                {
                    "question": "Erklären Sie die Bedeutung von Lambda-Ausdrücken in modernen Programmiersprachen und geben Sie ein kurzes Beispiel.",
                    "answer": "Lambda-Ausdrücke sind anonyme Funktionen, die direkt im Code definiert werden können, ohne eine separate Funktionsdefinition zu benötigen. Sie ermöglichen eine kompakte und flexible Schreibweise für kleine Funktionalitäten. Beispiel in Java:\n```\nnumbers.forEach(n -> System.out.println(n));\n```\nDieser Ausdruck gibt jedes Element einer Liste aus."
                }
            ]
        },
        {
            "title": "Entwicklungstools",
            "questions": [
                {
                    "question": "Was ist ein Versionskontrollsystem (VCS) und welche Vorteile bietet es in der Softwareentwicklung?",
                    "answer": "Ein Versionskontrollsystem ermöglicht das Verwalten, Verfolgen und Zusammenführen von Änderungen in Quelltexten. Es unterstützt die Zusammenarbeit mehrerer Entwickler, minimiert Versionskonflikte und bietet eine lückenlose Historie aller Änderungen. Git ist ein weit verbreitetes, verteiltes VCS, das diese Vorteile exemplarisch darstellt."
                },
                {
                    "question": "Erklären Sie die Begriffe 'Working Directory', 'Staging Area' und 'Repository' in Git.",
                    "answer": "Das Working Directory ist der aktuelle Arbeitsbereich, in dem Dateien bearbeitet werden. Die Staging Area dient als Zwischenspeicher, in dem Änderungen gesammelt werden, bevor sie endgültig in das Repository übernommen werden. Das Repository selbst speichert alle versionierten Dateien und deren Historie."
                },
                {
                    "question": "Wie initialisieren Sie ein neues Git-Repository und welche grundlegenden Konfigurationen sind dabei notwendig?",
                    "answer": "Ein neues Git-Repository wird mit dem Befehl 'git init' im entsprechenden Projektordner erstellt. Anschließend sollten grundlegende Benutzereinstellungen wie der Name und die E-Mail-Adresse über 'git config' konfiguriert werden, damit alle Commits korrekt zugeordnet werden können."
                },
                {
                    "question": "Was ist ein Branch in Git und wie unterstützt er die parallele Entwicklung von Features?",
                    "answer": "Ein Branch ist ein separater Entwicklungszweig, der es ermöglicht, Änderungen isoliert vom Hauptzweig (z. B. 'main') vorzunehmen. Branches ermöglichen es, neue Features oder Bugfixes unabhängig zu entwickeln und nach Abschluss in den Hauptzweig zu integrieren (Merge), wodurch paralleles Arbeiten effizient unterstützt wird."
                },
                {
                    "question": "Erklären Sie den Unterschied zwischen lokalen und Remote-Repositories in Git.",
                    "answer": "Lokale Repositories befinden sich auf dem Computer des Entwicklers, während Remote-Repositories auf Servern liegen, die eine zentrale Zusammenarbeit ermöglichen. Mit Befehlen wie 'git push' und 'git pull' werden Änderungen zwischen dem lokalen und dem Remote-Repository synchronisiert."
                },
                {
                    "question": "Was sind Git-Hooks und wie können sie den Entwicklungsprozess verbessern?",
                    "answer": "Git-Hooks sind Skripte, die vor oder nach bestimmten Git-Aktionen (z. B. Commit, Push) automatisch ausgeführt werden. Sie können zur Automatisierung von Tests, Codeformatierung oder anderen Prüfungen verwendet werden, um die Codequalität zu verbessern und den Entwicklungsprozess effizienter zu gestalten."
                },
                {
                    "question": "Nennen Sie einen häufig genannten Nachteil von Git, insbesondere für Anfänger.",
                    "answer": "Ein häufig genannter Nachteil von Git ist die steile Lernkurve. Die Vielzahl an Befehlen und Konzepten wie Branching, Merging und Rebasing kann für Anfänger überwältigend sein und zu Fehlern im Umgang mit dem System führen."
                },
                {
                    "question": "Was ist ein Build-Management-Tool und welche Aufgaben übernimmt es in der Softwareentwicklung?",
                    "answer": "Ein Build-Management-Tool automatisiert den Prozess der Softwareerstellung, einschließlich Kompilierung, Linken, Testen und Deployment. Es verwaltet Abhängigkeiten und Konfigurationen, wodurch konsistente und reproduzierbare Builds ermöglicht werden. Beispiele hierfür sind Maven, Gradle und make."
                },
                {
                    "question": "Vergleichen Sie Maven und Gradle hinsichtlich ihres Konfigurationsansatzes.",
                    "answer": "Maven nutzt deklarative XML-Dateien, in denen Projektstrukturen, Abhängigkeiten und Build-Prozesse beschrieben werden. Gradle hingegen verwendet eine Domain Specific Language (DSL) basierend auf Groovy oder Kotlin, die eine imperativere und flexiblere Konfiguration ermöglicht. Beide Ansätze haben Vor- und Nachteile, abhängig von den spezifischen Anforderungen eines Projekts."
                },
                {
                    "question": "Was versteht man unter einer DSL im Kontext von Build-Management-Tools und welche Sprachen kommen dabei häufig zum Einsatz?",
                    "answer": "Eine Domain Specific Language (DSL) ist eine speziell für eine bestimmte Aufgabe entwickelte Sprache. Im Kontext von Build-Management-Tools wird in Gradle häufig eine DSL verwendet, die auf Groovy oder Kotlin basiert, um den Build-Prozess präzise und flexibel zu steuern."
                }
            ]
        },
        {
            "title": "Internet – Geschichte und Verfahren",
            "questions": [
                {
                    "question": "Nennen Sie die Ursprünge des Internets und beschreiben Sie kurz die Rolle von ARPANET.",
                    "answer": "Die Ursprünge des Internets liegen in Projekten des US-Verteidigungsministeriums, insbesondere im ARPANET, das als erstes Netzwerk Universitäten miteinander verband. ARPANET legte die Grundlagen für moderne Netzwerkprotokolle und die dezentrale Datenübertragung, wodurch spätere Entwicklungen im Internet ermöglicht wurden."
                },
                {
                    "question": "Erklären Sie das ALOHA-Netzwerk: Wie funktionierte es und welche Herausforderungen traten dabei auf?",
                    "answer": "Das ALOHA-Netzwerk war ein frühes drahtloses Netzwerk, bei dem Geräte einfach sendeten, wenn der Kanal frei war, und bei Kollisionen zufällig wieder versuchten. Diese Methode führte jedoch zu hohen Fehlerraten und Übertragungsproblemen, da Kollisionen häufig vorkamen und die verfügbare Bandbreite ineffizient genutzt wurde."
                },
                {
                    "question": "Was bedeutet CSMA/CD und wie wird dieses Verfahren in Ethernet-Netzwerken angewendet?",
                    "answer": "CSMA/CD steht für Carrier Sense Multiple Access with Collision Detection. Es handelt sich um ein Verfahren, bei dem Geräte vor dem Senden den Kanal abhören (Carrier Sense), um sicherzustellen, dass er frei ist. Wenn dennoch eine Kollision auftritt, erkennen die Geräte dies (Collision Detection) und brechen den Sendevorgang ab, um nach einer zufälligen Wartezeit erneut zu senden. Dadurch wird die Effizienz der Datenübertragung in kabelgebundenen Netzwerken verbessert."
                },
                {
                    "question": "Beschreiben Sie die Bedeutung von IP-Adressen im Internet und erläutern Sie, warum sie üblicherweise in vier Oktetten dargestellt werden.",
                    "answer": "IP-Adressen dienen als eindeutige Identifikatoren für Geräte in einem Netzwerk. Sie werden üblicherweise in vier Oktetten dargestellt (z. B. 192.168.0.1), da jedes Oktett 8 Bit umfasst und so ein Bereich von 0 bis 255 abdeckt. Diese Gruppierung erleichtert die Lesbarkeit und Verwaltung der Adressen und unterstützt die hierarchische Strukturierung von Netzwerken."
                },
                {
                    "question": "Erklären Sie, wie Subnetting zur effizienten Nutzung von IP-Adressen beiträgt.",
                    "answer": "Subnetting teilt ein großes Netzwerk in kleinere, überschaubare Teilnetze auf. Dadurch wird der Adressraum effizienter genutzt, die Broadcast-Domänen werden verkleinert und die Netzwerksicherheit sowie die Performance verbessert. Subnetting ermöglicht eine flexible Netzplanung, indem es erlaubt, Adressbereiche gezielt an die Bedürfnisse einzelner Netzwerksegmente anzupassen."
                },
                {
                    "question": "Welche Rolle spielten Fehlererkennungs- und Fehlerkorrekturmechanismen in frühen Netzwerken?",
                    "answer": "Frühe Netzwerke setzten auf Mechanismen wie Prüfsummen, Error Detecting Codes (EDC) und Error Correcting Codes (ECC), um Übertragungsfehler zu erkennen und zu korrigieren. Diese Verfahren erhöhten die Zuverlässigkeit der Datenübertragung, indem sie es ermöglichten, Fehler zu identifizieren und in manchen Fällen automatisch zu beheben, was besonders bei unsicheren Übertragungsmedien essenziell war."
                },
                {
                    "question": "Vergleichen Sie die Ansätze von ALOHA und ARPANET hinsichtlich ihrer Netzwerkprotokolle und der aufgetretenen Herausforderungen.",
                    "answer": "Das ALOHA-Netzwerk war ein einfaches, drahtloses Übertragungsprotokoll, das ohne komplexe Kollisionsvermeidung auskam, was zu häufigen Übertragungsfehlern führte. ARPANET hingegen verwendete kabelgebundene Verbindungen und entwickelte robuste Protokolle, um die Kommunikation zwischen mehreren Computern zu koordinieren. Während ALOHA aufgrund seiner Einfachheit und hohen Fehlerraten begrenzt war, legte ARPANET den Grundstein für skalierbare und zuverlässige Netzwerkkommunikation."
                },
                {
                    "question": "Erklären Sie, wie Routing im Internet funktioniert und welche Herausforderungen dabei auftreten können.",
                    "answer": "Routing im Internet bezieht sich auf die Weiterleitung von Datenpaketen über verschiedene Netzwerke hinweg. Router verwenden Routing-Tabellen und Algorithmen, um den optimalen Pfad für jedes Paket zu bestimmen, basierend auf Kriterien wie Distanz, Auslastung und Kosten. Herausforderungen sind dynamische Netzwerktopologien, sich ändernde Verkehrsbedingungen und die Vermeidung von Routing-Schleifen, was eine kontinuierliche Aktualisierung der Routing-Tabellen erforderlich macht."
                },
                {
                    "question": "Diskutieren Sie den Einfluss militärischer und universitärer Projekte auf die frühe Entwicklung des Internets.",
                    "answer": "Militärische Projekte wie ARPANET, gefördert durch das US-Verteidigungsministerium, sowie universitäre Forschungsprojekte spielten eine zentrale Rolle in der Entwicklung des Internets. Diese Initiativen führten zur Entwicklung erster Netzwerkprotokolle und dezentraler Kommunikationsstrukturen, die den Grundstein für die spätere weltweite Verbreitung des Internets legten."
                },
                {
                    "question": "Warum ist die 'Carrier Sense'-Funktion im CSMA/CD-Verfahren entscheidend für eine effiziente Netzwerknutzung?",
                    "answer": "Die 'Carrier Sense'-Funktion ermöglicht es Geräten, vor dem Senden zu überprüfen, ob der Übertragungskanal frei ist. Dies reduziert das Risiko von Kollisionen, da ein Gerät nur sendet, wenn keine anderen aktiv auf dem Kanal kommunizieren. Dadurch wird die Effizienz der Datenübertragung erhöht und die Wahrscheinlichkeit von Störungen im Netzwerk verringert."
                }
            ]
        },
        {
            "title": "UML (späterer Schwerpunkt Anwendungsentwicklung)",
            "questions": [
                {
                    "question": "Was ist UML und welche Grundprinzipien liegen dieser Modellierungssprache zugrunde?",
                    "answer": "UML steht für Unified Modeling Language und ist eine standardisierte visuelle Sprache zur Beschreibung, Analyse und Gestaltung von Softwarearchitekturen. Sie basiert auf klar definierten Diagrammtypen, die sowohl die statische Struktur als auch das dynamische Verhalten eines Systems darstellen."
                },
                {
                    "question": "Welche typischen UML-Diagrammtypen gibt es und welche Informationen stellen sie dar?",
                    "answer": "Typische UML-Diagrammtypen sind:\n- **Klassendiagramme:** Zeigen die statische Struktur eines Systems, einschließlich Klassen, Attribute, Methoden und Beziehungen.\n- **Use-Case-Diagramme:** Modellieren die Interaktionen zwischen Akteuren und dem System, um Anforderungen zu erfassen.\n- **Sequenzdiagramme:** Visualisieren die zeitliche Abfolge von Nachrichten zwischen Objekten.\n- **Aktivitätsdiagramme:** Beschreiben den Ablauf von Aktivitäten und Entscheidungsprozessen in einem Geschäfts- oder Systemprozess.\n- **Zustandsdiagramme:** Zeigen, wie sich Objekte im Laufe der Zeit unter verschiedenen Bedingungen verhalten."
                },
                {
                    "question": "Wie unterstützt ein UML-Klassendiagramm die Modellierung von Softwarearchitekturen?",
                    "answer": "Ein UML-Klassendiagramm stellt die statische Struktur eines Systems dar, indem es Klassen, ihre Attribute und Methoden sowie die Beziehungen wie Vererbung, Assoziationen oder Aggregationen visualisiert. Dies erleichtert das Verständnis der Systemkomponenten und ihrer Interaktionen und dient als Grundlage für die Implementierung."
                },
                {
                    "question": "Was unterscheidet dynamische UML-Diagramme von statischen UML-Diagrammen?",
                    "answer": "Statische UML-Diagramme, wie Klassendiagramme, zeigen die Struktur und Beziehungen der Systemkomponenten zu einem bestimmten Zeitpunkt. Dynamische UML-Diagramme, wie Sequenz- oder Aktivitätsdiagramme, stellen hingegen das Verhalten und die Interaktionen der Komponenten im zeitlichen Ablauf dar."
                },
                {
                    "question": "Wie können UML-Diagramme zur Verbesserung der Kommunikation im Entwicklungsteam beitragen?",
                    "answer": "UML-Diagramme bieten eine standardisierte und visuelle Darstellung von Systemarchitekturen und Prozessen, wodurch Missverständnisse reduziert werden. Sie ermöglichen es Entwicklern, Anforderungen, Entwürfe und Abläufe klar zu kommunizieren, was zu einer besseren Zusammenarbeit und effizienteren Problemlösung führt."
                },
                {
                    "question": "Welche Rolle spielen Use-Case-Diagramme in der Anforderungsanalyse?",
                    "answer": "Use-Case-Diagramme helfen dabei, die funktionalen Anforderungen eines Systems zu identifizieren, indem sie die Interaktionen zwischen externen Akteuren und dem System darstellen. Sie bieten eine Übersicht über die erwarteten Funktionen und unterstützen so die Definition der Systemgrenzen und Nutzerbedürfnisse."
                },
                {
                    "question": "Wie können Sequenzdiagramme zur Veranschaulichung der Interaktion zwischen Objekten genutzt werden?",
                    "answer": "Sequenzdiagramme stellen den Nachrichtenaustausch zwischen Objekten in einer zeitlichen Reihenfolge dar. Sie veranschaulichen, wie Objekte miteinander interagieren, welche Methoden aufgerufen werden und in welcher Reihenfolge dies geschieht, was für das Verständnis komplexer Abläufe essentiell ist."
                },
                {
                    "question": "Welche Bedeutung haben Aktivitätsdiagramme in der Modellierung von Geschäftsprozessen und Systemabläufen?",
                    "answer": "Aktivitätsdiagramme visualisieren den Fluss von Aktivitäten, Entscheidungen und parallelen Abläufen in einem Prozess. Sie sind besonders nützlich, um Geschäftsprozesse oder Arbeitsabläufe zu analysieren und zu optimieren, da sie den gesamten Prozess von Anfang bis Ende übersichtlich darstellen."
                },
                {
                    "question": "Wie unterstützt UML die Umsetzung objektorientierter Konzepte in der Softwareentwicklung?",
                    "answer": "UML unterstützt objektorientierte Konzepte, indem es Werkzeuge zur Modellierung von Klassen, Objekten, Vererbungsstrukturen, Assoziationen und Schnittstellen bereitstellt. Dies ermöglicht Entwicklern, komplexe Systeme zu planen, die Prinzipien wie Kapselung, Vererbung und Polymorphie nutzen, um wartbaren und erweiterbaren Code zu schreiben."
                },
                {
                    "question": "Welche Vorteile bietet der Einsatz von UML in der Anwendungsentwicklung?",
                    "answer": "Der Einsatz von UML ermöglicht eine klare und strukturierte Darstellung der Systemarchitektur und Prozesse, was die Planung, Kommunikation und Dokumentation innerhalb von Entwicklungsteams verbessert. Dadurch können potenzielle Probleme frühzeitig erkannt, die Zusammenarbeit optimiert und die Implementierung effizienter gestaltet werden."
                }
            ]
        }
    ]
}
